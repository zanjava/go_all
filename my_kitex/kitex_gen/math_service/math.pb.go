// Code generated by Kitex v0.14.1. DO NOT EDIT.

package math_service

import (
	"context"

	"github.com/cloudwego/prutal"
)

type AddRequest struct {
	Left  int32 `protobuf:"varint,1,opt,name=left" json:"left,omitempty"`
	Right int32 `protobuf:"varint,2,opt,name=right" json:"right,omitempty"`
}

func (x *AddRequest) Reset() { *x = AddRequest{} }

func (x *AddRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *AddRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *AddRequest) GetLeft() int32 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *AddRequest) GetRight() int32 {
	if x != nil {
		return x.Right
	}
	return 0
}

type AddResponse struct {
	Sum int32 `protobuf:"varint,1,opt,name=sum" json:"sum,omitempty"`
}

func (x *AddResponse) Reset() { *x = AddResponse{} }

func (x *AddResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *AddResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *AddResponse) GetSum() int32 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type SubRequest struct {
	Left  int32 `protobuf:"varint,1,opt,name=left" json:"left,omitempty"`
	Right int32 `protobuf:"varint,2,opt,name=right" json:"right,omitempty"`
}

func (x *SubRequest) Reset() { *x = SubRequest{} }

func (x *SubRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SubRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SubRequest) GetLeft() int32 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *SubRequest) GetRight() int32 {
	if x != nil {
		return x.Right
	}
	return 0
}

type SubResponse struct {
	Diff int32 `protobuf:"varint,1,opt,name=diff" json:"diff,omitempty"`
}

func (x *SubResponse) Reset() { *x = SubResponse{} }

func (x *SubResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SubResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SubResponse) GetDiff() int32 {
	if x != nil {
		return x.Diff
	}
	return 0
}

type Math interface {
	Add(ctx context.Context, req *AddRequest) (res *AddResponse, err error)
	Sub(ctx context.Context, req *SubRequest) (res *SubResponse, err error)
}
