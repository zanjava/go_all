// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: student_service.proto

package grpc_service

import (
	context "context"
	model "go/base/grpc/idl/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Student_QueryStudent_FullMethodName   = "/idl.service.student/QueryStudent"
	Student_QueryStudents1_FullMethodName = "/idl.service.student/QueryStudents1"
	Student_QueryStudents2_FullMethodName = "/idl.service.student/QueryStudents2"
	Student_QueryStudents3_FullMethodName = "/idl.service.student/QueryStudents3"
	Student_QueryStudents4_FullMethodName = "/idl.service.student/QueryStudents4"
)

// StudentClient is the client API for Student service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentClient interface {
	// Unary RPC
	QueryStudent(ctx context.Context, in *QueryStudentRequest, opts ...grpc.CallOption) (*QueryStudentResponse, error)
	QueryStudents1(ctx context.Context, in *StudentIds, opts ...grpc.CallOption) (*QueryStudentResponse, error)
	// Server streaming RPC
	QueryStudents2(ctx context.Context, in *StudentIds, opts ...grpc.CallOption) (grpc.ServerStreamingClient[model.Student], error)
	// Client streaming RPC
	QueryStudents3(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StudentId, QueryStudentResponse], error)
	// Bidirectional streaming RPC
	QueryStudents4(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StudentId, model.Student], error)
}

type studentClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentClient(cc grpc.ClientConnInterface) StudentClient {
	return &studentClient{cc}
}

func (c *studentClient) QueryStudent(ctx context.Context, in *QueryStudentRequest, opts ...grpc.CallOption) (*QueryStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryStudentResponse)
	err := c.cc.Invoke(ctx, Student_QueryStudent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) QueryStudents1(ctx context.Context, in *StudentIds, opts ...grpc.CallOption) (*QueryStudentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryStudentResponse)
	err := c.cc.Invoke(ctx, Student_QueryStudents1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) QueryStudents2(ctx context.Context, in *StudentIds, opts ...grpc.CallOption) (grpc.ServerStreamingClient[model.Student], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Student_ServiceDesc.Streams[0], Student_QueryStudents2_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StudentIds, model.Student]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Student_QueryStudents2Client = grpc.ServerStreamingClient[model.Student]

func (c *studentClient) QueryStudents3(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[StudentId, QueryStudentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Student_ServiceDesc.Streams[1], Student_QueryStudents3_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StudentId, QueryStudentResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Student_QueryStudents3Client = grpc.ClientStreamingClient[StudentId, QueryStudentResponse]

func (c *studentClient) QueryStudents4(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StudentId, model.Student], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Student_ServiceDesc.Streams[2], Student_QueryStudents4_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StudentId, model.Student]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Student_QueryStudents4Client = grpc.BidiStreamingClient[StudentId, model.Student]

// StudentServer is the server API for Student service.
// All implementations must embed UnimplementedStudentServer
// for forward compatibility.
type StudentServer interface {
	// Unary RPC
	QueryStudent(context.Context, *QueryStudentRequest) (*QueryStudentResponse, error)
	QueryStudents1(context.Context, *StudentIds) (*QueryStudentResponse, error)
	// Server streaming RPC
	QueryStudents2(*StudentIds, grpc.ServerStreamingServer[model.Student]) error
	// Client streaming RPC
	QueryStudents3(grpc.ClientStreamingServer[StudentId, QueryStudentResponse]) error
	// Bidirectional streaming RPC
	QueryStudents4(grpc.BidiStreamingServer[StudentId, model.Student]) error
	mustEmbedUnimplementedStudentServer()
}

// UnimplementedStudentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStudentServer struct{}

func (UnimplementedStudentServer) QueryStudent(context.Context, *QueryStudentRequest) (*QueryStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStudent not implemented")
}
func (UnimplementedStudentServer) QueryStudents1(context.Context, *StudentIds) (*QueryStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStudents1 not implemented")
}
func (UnimplementedStudentServer) QueryStudents2(*StudentIds, grpc.ServerStreamingServer[model.Student]) error {
	return status.Errorf(codes.Unimplemented, "method QueryStudents2 not implemented")
}
func (UnimplementedStudentServer) QueryStudents3(grpc.ClientStreamingServer[StudentId, QueryStudentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method QueryStudents3 not implemented")
}
func (UnimplementedStudentServer) QueryStudents4(grpc.BidiStreamingServer[StudentId, model.Student]) error {
	return status.Errorf(codes.Unimplemented, "method QueryStudents4 not implemented")
}
func (UnimplementedStudentServer) mustEmbedUnimplementedStudentServer() {}
func (UnimplementedStudentServer) testEmbeddedByValue()                 {}

// UnsafeStudentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentServer will
// result in compilation errors.
type UnsafeStudentServer interface {
	mustEmbedUnimplementedStudentServer()
}

func RegisterStudentServer(s grpc.ServiceRegistrar, srv StudentServer) {
	// If the following call pancis, it indicates UnimplementedStudentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Student_ServiceDesc, srv)
}

func _Student_QueryStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).QueryStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Student_QueryStudent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).QueryStudent(ctx, req.(*QueryStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_QueryStudents1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).QueryStudents1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Student_QueryStudents1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).QueryStudents1(ctx, req.(*StudentIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_QueryStudents2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StudentIds)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StudentServer).QueryStudents2(m, &grpc.GenericServerStream[StudentIds, model.Student]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Student_QueryStudents2Server = grpc.ServerStreamingServer[model.Student]

func _Student_QueryStudents3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentServer).QueryStudents3(&grpc.GenericServerStream[StudentId, QueryStudentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Student_QueryStudents3Server = grpc.ClientStreamingServer[StudentId, QueryStudentResponse]

func _Student_QueryStudents4_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StudentServer).QueryStudents4(&grpc.GenericServerStream[StudentId, model.Student]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Student_QueryStudents4Server = grpc.BidiStreamingServer[StudentId, model.Student]

// Student_ServiceDesc is the grpc.ServiceDesc for Student service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Student_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idl.service.student",
	HandlerType: (*StudentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryStudent",
			Handler:    _Student_QueryStudent_Handler,
		},
		{
			MethodName: "QueryStudents1",
			Handler:    _Student_QueryStudents1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryStudents2",
			Handler:       _Student_QueryStudents2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryStudents3",
			Handler:       _Student_QueryStudents3_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "QueryStudents4",
			Handler:       _Student_QueryStudents4_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "student_service.proto",
}
